/* jshint node: true */
/* global suite, test */
'use strict';

/**
 * @fileoverview The tests run by this file generally compare the triangles
 * generated by the current version of libtess against a known-good version.
 * Note that the comparison is currently strict deep equality, meaning that not
 * only must the vertices be found at the exact same floating-point coordinates,
 * but the triangle vertices must be emitted in the exact same order. This
 * limits optimizations to transformations that change neither by design.
 * Optimizations that do change that output must be much more carefully
 * considered in light of the careful design around numerical precision limits.
 */

var chai = require('chai');
var assert = chai.assert;

var common = require('./common.js');
var libtess = common.libtess;
var createTessellator = common.createInstrumentedTessellator;
var createPlaneRotation = common.createPlaneRotation;

var basetess = require('./expectations/libtess.baseline.js');

// geometry tests are both here and in third_party
var rfolder = require('./rfolder.js');
var geometryFiles = rfolder('./geometry');
var geometries = Object.keys(geometryFiles).map(function(filename) {
  return geometryFiles[filename];
});
var thirdPartyFiles = rfolder('../third_party/test/geometry');
var thirdPartyGeometries = Object.keys(thirdPartyFiles).map(function(filename) {
  return thirdPartyFiles[filename];
});
geometries.push.apply(geometries, thirdPartyGeometries);

var OUTPUT_TYPES = common.OUTPUT_TYPES;
var PROVIDE_NORMALS = common.PROVIDE_NORMALS;
var NORMALS = common.NORMALS;
var WINDING_RULES = common.WINDING_RULES;

suite('Geometry tests', function() {
  for (var i = 0; i < geometries.length; i++) {
    testGeometry(geometries[i]);
  }
});

/**
 * Tests multiple permutations of options in tessellating the provided geometry
 * contours against a baseline (ostensibly correct) tessellator.
 * @param {{name: string, value: !Array.<!Array.<number>>}} geometry
 */
function testGeometry(geometry) {
  suite(geometry.name, function() {

    OUTPUT_TYPES.forEach(function(outputType) {
      suite(outputType.name, function() {

        PROVIDE_NORMALS.forEach(function(provideNormal) {
          suite('using ' + provideNormal.name, function() {

            NORMALS.forEach(function(normal) {
              suite('in the ' + normal.name, function() {

                WINDING_RULES.forEach(function(windingRule) {

                  var baselineTessellator = createTessellator(basetess,
                      outputType);
                  var expectation = tessellate(baselineTessellator,
                      geometry.value, outputType, provideNormal, normal,
                      windingRule);

                  var testDescription = 'should generate correct ' +
                    outputType.name + ' with winding rule ' + windingRule.name;

                  test(testDescription, function() {
                    var tessellator = createTessellator(libtess, outputType);
                    var result = tessellate(tessellator, geometry.value,
                      outputType, provideNormal, normal, windingRule);

                    assert.isArray(result, 'tessellation result not an array');
                    assert.deepEqual(result, expectation,
                        'tessellation result not as expected');
                  });
                });
              });
            });
          });
        });
      });
    });
  });
}

/**
 * Tessellate the polygon made up of contours with the tessellator tess, using
 * the specified options.
 * @param {!libtess.GluTesselator} tess
 * @param {!Array.<!Array.<number>>} contours
 * @param {{name: string, value: boolean}} outputType
 * @param {{name: string, value: boolean}} provideNormal
 * @param {{name: string, value: !Array.<number>}} normal
 * @param {{name: string, value: boolean}} windingRule
 * @return {!Array.<!Array.<number>>}
 */
function tessellate(tess, contours, outputType, provideNormal, normal,
    windingRule) {

  // winding rule
  tess.gluTessProperty(libtess.gluEnum.GLU_TESS_WINDING_RULE,
      windingRule.value);

  // transform function to align plane with desired normal
  var rotate = createPlaneRotation(normal.value);

  // provide normal or compute
  if (provideNormal.value) {
    tess.gluTessNormal.apply(tess, normal.value);
  }

  var resultVerts = [];
  tess.gluTessBeginPolygon(resultVerts);

  for (var i = 0; i < contours.length; i++) {
    tess.gluTessBeginContour();
    var contour = contours[i];
    for (var j = 0; j < contour.length; j += 3) {
      var coords = rotate(contour[j], contour[j + 1], contour[j + 2]);
      tess.gluTessVertex(coords, coords);
    }
    tess.gluTessEndContour();
  }

  tess.gluTessEndPolygon();

  return resultVerts;
}
